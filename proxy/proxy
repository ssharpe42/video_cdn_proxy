#!/usr/bin/env python

import sys
from socket_utils import socket_bind_listen, socket_bind_connect, receive

MAX_SIZE = 8  #Maximum bits to receive
SERVER_PORT = 8080
FAKE_PORT = 0


class Proxy:

	"""Proxy Class"""

	def __init__(self, listen_port, fake_ip, server_ip):

		#Set all inputs
		self.listen_port = listen_port
		self.fake_ip = fake_ip
		self.server_ip = server_ip

	def run(self):

		""" Run proxy """

		# Bind and listen for clients
		self.client_socket = socket_bind_listen('', self.listen_port)

		print 'Proxy listening for client connections...'

		# Loop to keep accepting connections
		while True:

			# Accept client connection
			client, addr = self.client_socket.accept()
			print 'Connected to client at:',client.getpeername()
			client.close()
			# Bind to fake ip and connect to server
			server = socket_bind_connect(self.fake_ip, FAKE_PORT,self.server_ip, SERVER_PORT)

			# If server doesn't exist, disconnect from client and continue loop
			if not server:
				print "Could not connect to server. Closing connection to client. "
				client.close()


			else:
				print "Connected to server at:",server.getpeername()
				while True:

					# Receive message from client
					client_msg = receive(client, server, MAX_SIZE)
					try:
						# Send to server
						server.send(client_msg)
					except:
						break
					print 'Data sent client --> server:', client_msg[:-1]

					# Receive message from server
					server_msg = receive(server, client, MAX_SIZE)
					try:
						#Send to client
						client.send(server_msg)
					except:
						break
					print 'Data sent server --> client:', server_msg[:-1]

				# Close connections if break out of loop
				server.close()
				client.close()



if __name__ == '__main__':

	listen_port = int(sys.argv[1])
	fake_ip  = sys.argv[2]
	server_ip = sys.argv[3]

	P = Proxy(listen_port=listen_port, fake_ip=fake_ip, server_ip=server_ip)
	P.run()
